{
  "paragraphs": [
    {
      "text": "%md\n\n# Scala 03 - Functions\nLet\u0027s start using functions in scala\n\n#### Topics\n- 01.Methods\n- 02.Lambda functions\n- 03.Iteration\n- 04.Recursivity\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2023-02-02 15:50:03.581",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eScala 03 - Functions\u003c/h1\u003e\n\u003cp\u003eLet\u0026rsquo;s start using functions in scala\u003c/p\u003e\n\u003ch4\u003eTopics\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e01.Methods\u003c/li\u003e\n\u003cli\u003e02.Lambda functions\u003c/li\u003e\n\u003cli\u003e03.Iteration\u003c/li\u003e\n\u003cli\u003e04.Recursivity\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674833095211_1855811198",
      "id": "paragraph_1674833095211_1855811198",
      "dateCreated": "2023-01-27 15:24:55.211",
      "dateStarted": "2023-02-02 15:50:03.582",
      "dateFinished": "2023-02-02 15:50:03.585",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## 01. Methods\n\n##### Scala methods\nIn scala, what we usually understand as function is called a method.\n\nA method is an operation defined on its own, or as part of a class/object (more on that later)\nOften, is a functionality that is embedded in that class and that you can invoke from that class.\nBut since scala 3, a method can be defined outside a class.\n\n\n\u003e ##### The following example would be the structure of a method:\n\u003e `def methodName(param1: Type1, param2: Type2): ReturnType \u003d {`  \n\u003e `    methodBody    return value`\n\u003e `}`\n\nLets see it in detail",
      "user": "anonymous",
      "dateUpdated": "2023-02-08 18:06:44.907",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e01. Methods\u003c/h2\u003e\n\u003ch5\u003eScala methods\u003c/h5\u003e\n\u003cp\u003eIn scala, what we usually understand as function is called a method.\u003c/p\u003e\n\u003cp\u003eA method is an operation defined on its own, or as part of a class/object (more on that later)\u003cbr /\u003e\nOften, is a functionality that is embedded in that class and that you can invoke from that class.\u003cbr /\u003e\nBut since scala 3, a method can be defined outside a class.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch5\u003eThe following example would be the structure of a method:\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003edef methodName(param1: Type1, param2: Type2): ReturnType \u003d {\u003c/code\u003e\u003cbr /\u003e\n\u003ccode\u003emethodBody return value\u003c/code\u003e\u003cbr /\u003e\n\u003ccode\u003e}\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLets see it in detail\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674833327999_866625240",
      "id": "paragraph_1674833327999_866625240",
      "dateCreated": "2023-01-27 15:28:47.999",
      "dateStarted": "2023-02-08 18:06:44.907",
      "dateFinished": "2023-02-08 18:06:44.915",
      "status": "FINISHED"
    },
    {
      "title": "Defining a method",
      "text": "\n// defining a method to add two numbers\ndef add(a: Int, b: Int): Int \u003d a + b\n\n//defining a method to substract to numbers\ndef sub(a: Int, b: Int) \u003d a - b\n\n// defining a larger method with local variables\ndef addThenDouble(a: Int, b: Int): Int \u003d {\n  val sum \u003d a + b\n  sum * 2\n}\n\n\n// let\u0027s call these methods and print them\nval x \u003d 10\nval y \u003d 5\nprintln(add(x,y))\nprintln(sub(x,y))\nprintln(addThenDouble(x,y))\n",
      "user": "anonymous",
      "dateUpdated": "2023-02-07 15:12:28.101",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "15\n5\n30\n\u001b[1m\u001b[34madd\u001b[0m: \u001b[1m\u001b[32m(a: Int, b: Int)Int\u001b[0m\n\u001b[1m\u001b[34msub\u001b[0m: \u001b[1m\u001b[32m(a: Int, b: Int)Int\u001b[0m\n\u001b[1m\u001b[34maddThenDouble\u001b[0m: \u001b[1m\u001b[32m(a: Int, b: Int)Int\u001b[0m\n\u001b[1m\u001b[34mx\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m \u003d 10\n\u001b[1m\u001b[34my\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m \u003d 5\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1674833104875_1699480128",
      "id": "paragraph_1674833104875_1699480128",
      "dateCreated": "2023-01-27 15:25:04.875",
      "dateStarted": "2023-02-07 15:12:28.116",
      "dateFinished": "2023-02-07 15:12:28.243",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\nNotice the following: \n- Variables declared inside a method, are immutable local variables; They can’t be accessed outside of the method\n- There’s no need for a return statement at the end of the method. Since almost everything in Scala is an expression, the method returns the last line of code\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2023-02-07 15:42:08.437",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNotice the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eVariables declared inside a method, are immutable local variables; They can’t be accessed outside of the method\u003c/li\u003e\n\u003cli\u003eThere’s no need for a return statement at the end of the method. Since almost everything in Scala is an expression, the method returns the last line of code\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675779098948_139589102",
      "id": "paragraph_1675779098948_139589102",
      "dateCreated": "2023-02-07 14:11:38.948",
      "dateStarted": "2023-02-07 15:42:08.437",
      "dateFinished": "2023-02-07 15:42:08.447",
      "status": "FINISHED"
    },
    {
      "text": "%md\nAn important feature to keep in mind are: \u003cb\u003e default parameters. \u003c/b\u003e\nYou can set the default values that the method will process, this could be useful to simplify the use of methods.\n\nIn case a parameter is almost all time the same, this could help us rewriting explicit parameters.\nAlso, this can work as a safety measure to keep our code from crashing (when calling methods, if there is an argument missing, an error will occurr)\n",
      "user": "anonymous",
      "dateUpdated": "2023-02-07 15:44:21.011",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eAn important feature to keep in mind are: \u003cb\u003e default parameters. \u003c/b\u003e\u003cbr /\u003e\nYou can set the default values that the method will process, this could be useful to simplify the use of methods.\u003c/p\u003e\n\u003cp\u003eIn case a parameter is almost all time the same, this could help us rewriting explicit parameters.\u003cbr /\u003e\nAlso, this can work as a safety measure to keep our code from crashing (when calling methods, if there is an argument missing, an error will occurr)\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675784099733_882359949",
      "id": "paragraph_1675784099733_882359949",
      "dateCreated": "2023-02-07 15:34:59.733",
      "dateStarted": "2023-02-07 15:44:21.012",
      "dateFinished": "2023-02-07 15:44:21.020",
      "status": "FINISHED"
    },
    {
      "title": "Default Parameters",
      "text": "%spark\n\n// An important feature to keep in mind are default parameters.\n// You can set the default values that the method will process, this could be useful to simplify the use of methods \n\n\n//In this example, we set the two variables while defining the method, see how it is done;\ndef makeConnection(timeout: Int \u003d 5000, protocol: String \u003d \"http\") \u003d {\n  println(f\"timeout \u003d ${timeout}%d, protocol \u003d ${protocol}%s\")\n}\n\n\n// Now let\u0027s try and call the method with/without explicit parameters:\nmakeConnection ()\nmakeConnection (1000, \"ftp\")",
      "user": "anonymous",
      "dateUpdated": "2023-02-07 15:40:25.551",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "timeout \u003d 5000, protocol \u003d http\ntimeout \u003d 1000, protocol \u003d ftp\n\u001b[1m\u001b[34mmakeConnection\u001b[0m: \u001b[1m\u001b[32m(timeout: Int, protocol: String)Unit\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675782843292_1932410417",
      "id": "paragraph_1675782843292_1932410417",
      "dateCreated": "2023-02-07 15:14:03.292",
      "dateStarted": "2023-02-07 15:40:25.565",
      "dateFinished": "2023-02-07 15:40:25.760",
      "status": "FINISHED"
    },
    {
      "text": "%md\nLets talk briefly about the \u003cb\u003e main method \u003c/b\u003e\nThis requires the use of an object (as said before, more on that later)\nInside an object: Naming a method \"main\" tells scala to execute this method when calling this object\n\nLet\u0027s see an example:\n",
      "user": "anonymous",
      "dateUpdated": "2023-02-08 14:51:35.345",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLets talk briefly about the \u003cb\u003e main method \u003c/b\u003e\u003cbr /\u003e\nThis requires the use of an object (as said before, more on that later)\u003cbr /\u003e\nInside an object: Naming a method \u0026ldquo;main\u0026rdquo; tells scala to execute this method when calling this object\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s see an example:\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675784663070_1439047390",
      "id": "paragraph_1675784663070_1439047390",
      "dateCreated": "2023-02-07 15:44:23.071",
      "dateStarted": "2023-02-08 14:51:35.345",
      "dateFinished": "2023-02-08 14:51:35.355",
      "status": "FINISHED"
    },
    {
      "title": "Main Method",
      "text": "%spark\n\n// this would be a sample object, with a main method that calls method1\nobject testObject {\n  \n  def method1() \u003d {\n    println(\"method 1 run\")\n  }\n  \n  def main(args: Array[String]): Unit \u003d\n    println(\"main method run\")\n    method1()\n}\n\n// As you\u0027ll see later, when calling \"testObject\" and running it in the command line, it will by default run the main method\n",
      "user": "anonymous",
      "dateUpdated": "2023-02-07 16:08:35.505",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "defined object testObject\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675785465058_1203995293",
      "id": "paragraph_1675785465058_1203995293",
      "dateCreated": "2023-02-07 15:57:45.058",
      "dateStarted": "2023-02-07 16:08:34.644",
      "dateFinished": "2023-02-07 16:08:34.837",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## 02. Functions\n\n##### Scala functions\nIn scala, functions are referred as \u0027lambda functions\u0027 or \u0027anonymous functions\u0027.\nThese anonymous functions are operations that do not have a defined name/identifier\n \nThis can be useful in scenarios where you want to create a function for a one-time usage.\nFor instance pass a function as a parameter to another function/method \nAn example would be to use it as argument for a map method (will review later)\n\nKeep an eye for the key operator that defines an anonymous: the arrow  \u003cb\u003e\" \u003d\u003e \"\u003c/b\u003e\n\n\u003e ##### The following example would be the structure of a lambda function:\n\u003e`(variable_name: Data_type) \u003d\u003e  Our logic goes here..`\n\n\nLet\u0027s create some actual functions",
      "user": "anonymous",
      "dateUpdated": "2023-02-08 18:05:23.153",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e02. Functions\u003c/h2\u003e\n\u003ch5\u003eScala functions\u003c/h5\u003e\n\u003cp\u003eIn scala, functions are referred as \u0026lsquo;lambda functions\u0026rsquo; or \u0026lsquo;anonymous functions\u0026rsquo;.\u003cbr /\u003e\nThese anonymous functions are operations that do not have a defined name/identifier\u003c/p\u003e\n\u003cp\u003eThis can be useful in scenarios where you want to create a function for a one-time usage.\u003cbr /\u003e\nFor instance pass a function as a parameter to another function/method\u003cbr /\u003e\nAn example would be to use it as argument for a map method (will review later)\u003c/p\u003e\n\u003cp\u003eKeep an eye for the key operator that defines an anonymous: the arrow  \u003cb\u003e\u0026quot; \u003d\u0026gt; \u0026quot;\u003c/b\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003ch5\u003eThe following example would be the structure of a lambda function:\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003e(variable_name: Data_type) \u003d\u0026gt; Our logic goes here..\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLet\u0026rsquo;s create some actual functions\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675354827956_535008290",
      "id": "paragraph_1675354827956_535008290",
      "dateCreated": "2023-02-02 16:20:27.956",
      "dateStarted": "2023-02-08 18:05:23.154",
      "dateFinished": "2023-02-08 18:05:23.163",
      "status": "FINISHED"
    },
    {
      "title": "Defining a Function",
      "text": "%spark\n//simple anonymous function appending a \"hello\" string\nval hello \u003d (a: String) \u003d\u003e a + \"Hello !!\"\nprintln(hello)\nprintln(hello(\"Saying \"))\n\n//a function returning the double of the integer input\nval double \u003d (n: Int) \u003d\u003e 2 * n\nprintln(double)\nprintln(double(15))\n\n//and now try a function to multiply who input integers\nval multiply \u003d (n: Int, i:Int) \u003d\u003e n * i\nprintln(multiply)\nprintln(multiply(3,4))\n\n// see that the function defined, does not have a name and it can live without being assigned to a variable\n// however, an anonymous function CAN be assigned to a variable",
      "user": "anonymous",
      "dateUpdated": "2023-02-09 14:59:08.914",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cfunction1\u003e\nSaying Hello !!\n\u003cfunction1\u003e\n30\n\u003cfunction2\u003e\n12\n\u001b[1m\u001b[34mhello\u001b[0m: \u001b[1m\u001b[32mString \u003d\u003e String\u001b[0m \u003d \u003cfunction1\u003e\n\u001b[1m\u001b[34mdouble\u001b[0m: \u001b[1m\u001b[32mInt \u003d\u003e Int\u001b[0m \u003d \u003cfunction1\u003e\n\u001b[1m\u001b[34mmultiply\u001b[0m: \u001b[1m\u001b[32m(Int, Int) \u003d\u003e Int\u001b[0m \u003d \u003cfunction2\u003e\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675869605928_1819657997",
      "id": "paragraph_1675869605928_1819657997",
      "dateCreated": "2023-02-08 15:20:05.928",
      "dateStarted": "2023-02-09 14:59:08.928",
      "dateFinished": "2023-02-09 14:59:09.246",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nval ints \u003d List(1, 2, 3)\nvar doubledInts \u003d ints.map((i: Int) \u003d\u003e i * 2)",
      "user": "anonymous",
      "dateUpdated": "2023-02-08 17:38:01.558",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mints\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m \u003d List(1, 2, 3)\n\u001b[1m\u001b[34mdoubledInts\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m \u003d List(2, 4, 6)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675877801069_97502895",
      "id": "paragraph_1675877801069_97502895",
      "dateCreated": "2023-02-08 17:36:41.071",
      "dateStarted": "2023-02-08 17:38:01.576",
      "dateFinished": "2023-02-08 17:38:02.402",
      "status": "FINISHED"
    },
    {
      "text": "%md\nA useful case to discuss is the \u003cb\u003e map method \u003c/b\u003e\n\nIs a operation that takes as arguments: \n-- a collection of elements\n-- and another function (f)\n\nAs the result, it returns a new collection with f applied to each element from the collection.\n\nKey concepts:\nEvery collection object has the map() method.\nmap() takes some function as a parameter.\nmap() applies the function to every element of the source collection.\nmap() returns a new collection of the same type as the source collection.\n\n\ncollection \u003d (e1, e2, e3, ...)\n\u003e `//func is some function`\n\u003e `collection.map(func)`\n\u003e `//returns collection(func(e1), func(e2), func(e3), ...)`\n\nWith this in mind let\u0027s try and use anonymous functions and map methods together",
      "user": "anonymous",
      "dateUpdated": "2023-02-08 18:06:14.301",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eA useful case to discuss is the \u003cb\u003e map method \u003c/b\u003e\u003c/p\u003e\n\u003cp\u003eIs a operation that takes as arguments:\u003cbr /\u003e\n\u0026ndash; a collection of elements\u003cbr /\u003e\n\u0026ndash; and another function (f)\u003c/p\u003e\n\u003cp\u003eAs the result, it returns a new collection with f applied to each element from the collection.\u003c/p\u003e\n\u003cp\u003eKey concepts:\u003cbr /\u003e\nEvery collection object has the map() method.\u003cbr /\u003e\nmap() takes some function as a parameter.\u003cbr /\u003e\nmap() applies the function to every element of the source collection.\u003cbr /\u003e\nmap() returns a new collection of the same type as the source collection.\u003c/p\u003e\n\u003cp\u003ecollection \u003d (e1, e2, e3, \u0026hellip;)\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003e//func is some function\u003c/code\u003e\u003cbr /\u003e\n\u003ccode\u003ecollection.map(func)\u003c/code\u003e\u003cbr /\u003e\n\u003ccode\u003e//returns collection(func(e1), func(e2), func(e3), ...)\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWith this in mind let\u0026rsquo;s try and use anonymous functions and map methods together\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675867835957_1717455417",
      "id": "paragraph_1675867835957_1717455417",
      "dateCreated": "2023-02-08 14:50:35.957",
      "dateStarted": "2023-02-08 18:06:14.302",
      "dateFinished": "2023-02-08 18:06:14.308",
      "status": "FINISHED"
    },
    {
      "title": "Map method and functions",
      "text": "%spark\n\n//lets create a map method that takes a list of integers, and returns the double of each integer\nvar ints \u003d List(1, 2, 3, 4, 5)\nvar doubledInts \u003d ints.map(i \u003d\u003e i * 2)\n// ((i: Int) \u003d\u003e i * 2)\n\n//go back and review the functions used before, we already wrote one and store it in a variable called \"double\"\n//we can embed that variable inside a map (the function \"double\" is an argument of the \".map\" method)\nvar ints2 \u003d List(10, 20, 30, 40, 50)\nvar doubledInts2 \u003d ints.map(double)\n\n//now lets try a method involving strings, prepend the word \"letter\" to each element\nvar strs \u003d List(\"a\",\"b\",\"c\",\"d\",\"e\")\nvar extendStrs \u003d strs.map(i \u003d\u003e \"letter \"+i)",
      "user": "anonymous",
      "dateUpdated": "2023-02-09 15:04:30.167",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mints\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m \u003d List(1, 2, 3, 4, 5)\n\u001b[1m\u001b[34mdoubledInts\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m \u003d List(2, 4, 6, 8, 10)\n\u001b[1m\u001b[34mints2\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m \u003d List(10, 20, 30, 40, 50)\n\u001b[1m\u001b[34mdoubledInts2\u001b[0m: \u001b[1m\u001b[32mList[Int]\u001b[0m \u003d List(2, 4, 6, 8, 10)\n\u001b[1m\u001b[34mstrs\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m \u003d List(a, b, c, d, e)\n\u001b[1m\u001b[34mextendStrs\u001b[0m: \u001b[1m\u001b[32mList[String]\u001b[0m \u003d List(letter a, letter b, letter c, letter d, letter e)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675870172384_1486375212",
      "id": "paragraph_1675870172384_1486375212",
      "dateCreated": "2023-02-08 15:29:32.384",
      "dateStarted": "2023-02-09 15:04:30.181",
      "dateFinished": "2023-02-09 15:04:30.412",
      "status": "FINISHED"
    },
    {
      "text": "%md\n####  Suggested material:\n\n- Functions vs Methods    - https://rjlfinn.medium.com/scala-methods-vs-functions-970342a842c9\n- Scala book - Methods    - https://docs.scala-lang.org/scala3/book/methods-most.html\n- Scala book - functions  - https://docs.scala-lang.org/scala3/book/fun-anonymous-functions.html\n- Anonymous functions - https://www.learningjournal.guru/article/scala/functional-programming/anonymous-function/\n- Map Method - https://www.geeksforgeeks.org/scala-map-method/",
      "user": "anonymous",
      "dateUpdated": "2023-02-08 17:56:56.701",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eSuggested material:\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFunctions vs Methods    - \u003ca href\u003d\"https://rjlfinn.medium.com/scala-methods-vs-functions-970342a842c9\"\u003ehttps://rjlfinn.medium.com/scala-methods-vs-functions-970342a842c9\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScala book - Methods    - \u003ca href\u003d\"https://docs.scala-lang.org/scala3/book/methods-most.html\"\u003ehttps://docs.scala-lang.org/scala3/book/methods-most.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eScala book - functions  - \u003ca href\u003d\"https://docs.scala-lang.org/scala3/book/fun-anonymous-functions.html\"\u003ehttps://docs.scala-lang.org/scala3/book/fun-anonymous-functions.html\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAnonymous functions - \u003ca href\u003d\"https://www.learningjournal.guru/article/scala/functional-programming/anonymous-function/\"\u003ehttps://www.learningjournal.guru/article/scala/functional-programming/anonymous-function/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMap Method - \u003ca href\u003d\"https://www.geeksforgeeks.org/scala-map-method/\"\u003ehttps://www.geeksforgeeks.org/scala-map-method/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675351755707_1016947858",
      "id": "paragraph_1675351755707_1016947858",
      "dateCreated": "2023-02-02 15:29:15.707",
      "dateStarted": "2023-02-08 17:56:56.702",
      "dateFinished": "2023-02-08 17:56:56.714",
      "status": "FINISHED"
    },
    {
      "text": "\n",
      "user": "anonymous",
      "dateUpdated": "2023-02-02 15:29:44.587",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1675351776422_2016318383",
      "id": "paragraph_1675351776422_2016318383",
      "dateCreated": "2023-02-02 15:29:36.422",
      "status": "READY"
    }
  ],
  "name": "scala 03 - functions",
  "id": "2HRBRQ5FM",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}